/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int rolls){
        int[] arrHolder = new int[rolls];
        Random rand = new Random();
        //a loop that goes through how times the person want to roll and then goes through if statement till one meets
        // the condition
        for(int i=0;i<rolls;i++){
            double randomRoll = rand.nextDouble();
            if(randomRoll>0.0 && randomRoll<=0.165){
                arrHolder[i]=1;
            }else  if(randomRoll>0.166 && randomRoll<=0.332){
                arrHolder[i]=2;
            }else if(randomRoll>0.333 && randomRoll<=0.498){
                arrHolder[i]=3;
            }else if(randomRoll>0.499 && randomRoll<=0.665){
                arrHolder[i]=4;
            }else if(randomRoll>0.666 && randomRoll<=0.830){
                arrHolder[i]=5;
            }else if(randomRoll>0.830){
                arrHolder[i]=6;
            }
        }

        return arrHolder;
    }

    public static boolean containsDuplicates(int[] arr){
        boolean flag = false;
        //first loops select the first spot
        for(int i=0;i< arr.length;i++){
            //second loop selects the second spot
            for(int j=0;j< arr.length;j++){
                //if compares the spots, if both spots are the same spot it skips. if not it compares the spots is they
                //are equal
                if(i==j){
                    continue;
                }
                if(arr[i]==arr[j]){
                    flag=true;
                    break;
                }
            }
            //breaks to stop the program since we found a dupe
            if(flag){
                break;
            }
        }

        return flag;
    }

    public static float calculateAverage(int[] arr){
        float aveHolder= 0;
        //just goes through adding up to aveHolder
        for(int num:arr){
            aveHolder+=num;
        }
        //divide to get average then return int
        aveHolder = aveHolder/arr.length;
        return aveHolder;
    }

    public static int[] averageLowestArray(int[][] arrayArray){
        //counter keeps track of idx
        int counter = 0;
        //to start of the comparison since idx 0 is always a given, assuming the args is an array of arrays
        float aveHolder=calculateAverage(arrayArray[0]);


        for(int i=0;i<arrayArray.length;i++){
            //will check is the seleced array from array average is lower than the current holder
            if(aveHolder>=calculateAverage(arrayArray[i])){
                //if it is, sets the counter to the current idx spot and make the average holder into the new lowest
                counter=i;
                aveHolder=calculateAverage(arrayArray[i]);
            }
        }

        System.out.println(Arrays.toString(arrayArray[counter]));
        return arrayArray[counter];
    }

    public static String averageTempString(int[][]arrWithArr){
        String epic="epic";
        HashSet<Integer> tempAverages = new HashSet<>();

        for(int[]  arr:arrWithArr){
            int tempHolder = (int) calculateAverage(arr);
            System.out.println(tempHolder+" this is int");
//            System.out.println(calculateAverage(arr)+" this is  float");
            tempAverages.add(tempHolder);
        }
        System.out.println(tempAverages);
        int high=0;
        int low=10000000;
        for(int temp:tempAverages){
            if(temp>high){
                high=temp;
            }else if(temp<low){
                low=temp;
            }
        }
        for(int temp:tempAverages){
            if(temp==high){
                System.out.println("High : "+high);
            }else if(temp==low){
                System.out.println("Low: "+low);
            }else {
                System.out.println("Never saw temperature: "+temp);
            }
        }
        System.out.println("this is high>> "+high+" this is low>>"+low);
        return epic;
    }

    public static String tally(List<String> counts){
        System.out.println(counts);
        HashSet<String> people = new HashSet<>();
        for(String peps:counts){
            people.add(peps);
        }
        HashMap<String, Integer> peopleCount = new HashMap<>();

        for (String curatedPeople:people){
            peopleCount.put(curatedPeople,0);
        }
        System.out.println(people);
        System.out.println(peopleCount);
        for (String nameBallots:counts){
            int totalCount= peopleCount.get(nameBallots);
            totalCount++;
            peopleCount.put(nameBallots,totalCount);
        }
        int maxVotes = Collections.max(peopleCount.values());
        String winnerOfBallots=" ";
        for(Map.Entry<String,Integer> entry:peopleCount.entrySet()){
            if(entry.getValue()==maxVotes){
                winnerOfBallots=entry.getKey()+" received the most votes!";
            }
        }
        return winnerOfBallots;
    }

}
